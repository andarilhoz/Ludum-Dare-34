<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_sentido_vida</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>spd = 15;
orbit_radius = 150;
orbit_angle = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(instance_exists(Player)){
    if(global.pause == false){
    alvo = instance_nearest(Player.x,Player.y,Coletavel);
    if(instance_exists(alvo)){
         if(Player.distanceLife &lt; 300){            
                direcao = point_direction(self.x,self.y,alvo.x,alvo.y);
                
                orbit_angle += spd;
                pontoX = alvo.x + orbit_radius * cos(orbit_angle * pi / 180);
                pontoY = alvo.y - orbit_radius * sin(orbit_angle * pi / 180);
                image_angle = direcao+ 270;
                move_towards_point(pontoX,pontoY,spd+10)
                
            }else{
                direcao = point_direction(Player.x,Player.y,alvo.x,alvo.y);
                
                orbit_angle = direcao;
                x = Player.x + orbit_radius * cos(orbit_angle * pi / 180);
                y = Player.y - orbit_radius * sin(orbit_angle * pi / 180);
                image_angle = direcao+ 270;
            }
                
    }
}
    if(global.pause == true){
        spd = 0;
        speed = 0;
    }else if(global.pause == false){
        spd = 15;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
